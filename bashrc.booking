#!/bin/bash

# Configure and unconfigure proxy variables as required by apps
function proxy () {
  PROXYADDR="http://webproxy.corp.booking.com:3128"
  OPTION="$1"
  if [ "$OPTION" == "0" ] || [ "$OPTION" == "off" ] || [ "$OPTION" == "no" ]; then
    unset http_proxy
    unset https_proxy
    unset HTTP_PROXY
    unset HTTPS_PROXY
    unset no_proxy
    printf "Proxy off\n"
  elif [ "$OPTION" == "1" ] || [ "$OPTION" == "on" ] || [ "$OPTION" == "yes" ]; then
    export http_proxy="$PROXYADDR"
    export https_proxy="$PROXYADDR"
    export HTTP_PROXY="$PROXYADDR"
    export HTTPS_PROXY="$PROXYADDR"
    export no_proxy="localhost,127.0.0.1,booking.com"
    printf "Proxy configured to $PROXYADDR\n"
  else
    printf "http_proxy=$http_proxy\n"
    printf "https_proxy=$https_proxy\n"
    printf "HTTP_PROXY=$HTTP_PROXY\n"
    printf "HTTPS_PROXY=$HTTPS_PROXY\n"
    printf "Please use 0/1, on/off, yes,no\n"
  fi
}

function appstore() {
  sshfs adm:/usr/local/git_tree/main/apps/admin/hoteladmin/extranet_ng/static/js/manage/app_store/app/ $HOME/workspace/appstore
  cd $HOME/workspace/appstore
}

function rssh() {
  OP_SESSION_torofaria=$(op signin --output=raw)
  if [ $? -ne 0 ]; then
    return 1
  fi
  booking_op_item_id=mi7n2bbvhbwwkkkybmbkn62btm
  booking_password=$(OP_SESSION_torofaria=$OP_SESSION_torofaria op get item $booking_op_item_id | jq ".details.fields | map(select(.designation == \"password\")) | .[0].value" -r)
  booking_2fa=$(OP_SESSION_torofaria=$OP_SESSION_torofaria op get totp $booking_op_item_id)
  expect -c 'spawn ssh -A ssh.booking.com
    expect {
       "Password: "  { send "'$booking_password'\r" ; exp_continue }
       "2FA Token: " { send "'$booking_2fa'\r"; exp_continue }
       exit
    }
  '
}
alias cmp="cd /Users/etorofaria/workspace/main/apps/cuca/hoteladmin/extranet_ng/manage/app_store"

function execpod() {
  pods=$(kubectl get pods | awk '{ if(NR>1)print $1 }')
  select pod in $pods; do
    kubectl exec -it $pod -- $@
    break;
  done
}

function execcontainer() {
  container=$1
  shift 1
  pods=$(kubectl get pods | awk '{ if(NR>1)print $1 }')
  select pod in $pods; do
    kubectl exec -c $container -it $pod -- $@
    break;
  done
}

alias k8sdqs="bkcloud use context etorofaria/vendor-portal/kubernetes-dev-etorofaria-87f7cfa3"
alias k8sprod="bkcloud use context bookingsuite-portal/vendorportal-service-prod/kubernetes-prod"

function k8sip() {
  kubectl get pod $@ -o yaml | grep podIP
}
