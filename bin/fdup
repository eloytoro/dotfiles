#!/bin/bash
# Usage: fdup [root dir] [target dir]

set -e

# type="f"
#
# while (( "$#" )); do
#   case "$1" in
#     --type)
#       if [ -n "$2" ] && { [ "$2" = "d" ] || [ "$2" = "f" ]; }; then
#         type=$2
#         shift 2
#       else
#         echo "Error: Argument for $1 is missing or invalid. Use 'd' for directories or 'f' for files." >&2
#         exit 1
#       fi
#       ;;
#     --) # end argument parsing
#       shift
#       break
#       ;;
#     -*|--*=) # unsupported flags
#       echo "Error: Unsupported flag $1" >&2
#       exit 1
#       ;;
#     *) # preserve positional arguments
#       break
#       ;;
#   esac
# done
#
rpbin="realpath"
if [[ "$OSTYPE" == "darwin"* ]]; then
  rpbin="grealpath"
fi
rel=$1
# format the path of the target dir to be relative to the root dir (in case it was absolute)
path=$($rpbin --relative-to $rel $2)
shift 2

if [ ! -e "$path" ]; then
  # if the path doesn't exist for some reason use the pwd as default
  path="."
fi

while true; do
  cmd="fd"
  if [ -n "$prev" ]; then
    # add flag to exclude dirs that were searched in already
    cmd="$cmd --base-directory $rel -E ${prev//$path/}"
  fi
  # add flags to search only for files within the target path
  eval "$cmd --type f '' $path $@"
  if [ $path == '.' ]; then
    break;
  fi
  prev=$path
  path=$($rpbin --relative-to $rel $path/..)
done
